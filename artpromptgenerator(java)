import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class sample extends JFrame {

    private static final String[] OBJECTS_PROMPTS = {
    "Draw a vintage clock.", "Draw an ornate teapot.", "Draw a pair of old boots.",
    "Draw a mysterious key.", "Draw an old book with glowing runes.", 
    "Draw a cracked mirror.", "Draw an antique compass.", 
    "Draw a pocket watch.", "Draw a wooden chest filled with treasures.", 
    "Draw a collection of unique vases.", "Draw a colorful umbrella.", 
    "Draw a pair of scissors.", "Draw a bundle of balloons.", 
    "Draw an elaborate chandelier.", "Draw a shiny trophy.", 
    "Draw an intricate door handle.", "Draw a cozy armchair.", 
    "Draw a lamp emitting a warm glow.", "Draw a towering candlestick.", 
    "Draw a hand fan.", "Draw a music box.", 
    "Draw a weathered ship anchor.", "Draw a garden gnome.", 
    "Draw a stack of pancakes.", "Draw a spooky lantern.", 
    "Draw a globe.", "Draw a pair of hiking boots.", 
    "Draw a toy robot.", "Draw a vintage bicycle.", 
    "Draw a chef's knife."
};

private static final String[] SCENARIO_PROMPTS = {
    "Draw a bustling marketplace.", "Draw a peaceful beach scene.",
    "Draw a stormy night in the forest.", "Draw a circus in full swing.", 
    "Draw a cozy cabin during snowfall.", "Draw a grand ballroom dance.", 
    "Draw a festival in a small village.", "Draw a shipwreck at sea.", 
    "Draw an alien invasion in a city.", "Draw a farmer's market in the morning.", 
    "Draw a camping trip under the stars.", "Draw a haunted house on Halloween.", 
    "Draw a pirate crew on their ship.", "Draw a sci-fi spaceport.", 
    "Draw a hidden underwater city.", "Draw a superhero saving the day.", 
    "Draw a royal coronation ceremony.", "Draw a bustling train station.", 
    "Draw a futuristic metropolis.", "Draw an enchanted forest.", 
    "Draw a bakery at sunrise.", "Draw a busy construction site.", 
    "Draw a mountain expedition.", "Draw a summer fair.", 
    "Draw a peaceful library.", "Draw a café during a rainy day.", 
    "Draw a family picnic.", "Draw a zombie apocalypse.", 
    "Draw a magical duel.", "Draw a grand opera performance."
};

private static final String[] ANIMAL_PROMPTS = {
    "Draw a majestic lion.", "Draw a playful dolphin.", 
    "Draw a soaring eagle.", "Draw a sleepy cat.", 
    "Draw a mischievous monkey.", "Draw a lumbering bear.", 
    "Draw a galloping horse.", "Draw a leaping deer.", 
    "Draw a curious raccoon.", "Draw a resting fox.", 
    "Draw a fluttering butterfly.", "Draw a swimming turtle.", 
    "Draw a roaring tiger.", "Draw a singing bird.", 
    "Draw a peaceful koala.", "Draw a family of elephants.", 
    "Draw a school of fish.", "Draw a slithering snake.", 
    "Draw a howling wolf.", "Draw a busy beaver.", 
    "Draw a hopping rabbit.", "Draw a grazing giraffe.", 
    "Draw a waddling penguin.", "Draw a lazy sloth.", 
    "Draw a colorful parrot.", "Draw a prowling leopard.", 
    "Draw a prickly porcupine.", "Draw a graceful swan.", 
    "Draw a bouncy kangaroo.", "Draw a majestic whale."
};

private static final String[] LANDSCAPE_PROMPTS = {
    "Draw a serene mountain range.", "Draw a dense forest at sunset.", 
    "Draw a calm lake reflecting the sky.", "Draw a vast desert with sand dunes.", 
    "Draw a tropical island.", "Draw a snowy landscape with pine trees.", 
    "Draw a starry night sky.", "Draw a flowing river in a valley.", 
    "Draw a field of wildflowers.", "Draw a dramatic canyon.", 
    "Draw a peaceful meadow.", "Draw a foggy morning in the hills.", 
    "Draw a windy seaside cliff.", "Draw a quiet swamp with tall reeds.", 
    "Draw a volcanic eruption.", "Draw a rustic farm.", 
    "Draw a futuristic cityscape.", "Draw a cozy village in autumn.", 
    "Draw a serene beach with clear water.", "Draw an icy tundra.", 
    "Draw a rainforest canopy.", "Draw a rolling countryside.", 
    "Draw a thunderstorm over a prairie.", "Draw a tranquil waterfall.", 
    "Draw a golden wheat field.", "Draw a lush jungle.", 
    "Draw a frozen lake.", "Draw a cherry blossom garden.", 
    "Draw a sunrise over a coastal bay.", "Draw a panoramic view of a canyon."
};

private static final String[] RANDOM_PROMPTS = {
    "Draw a pair of sunglasses.","Draw a majestic whale.",
    "Draw a bustling city street at dusk.","Draw a snowy mountain peak.",
    "Draw a fire in the dark.","Draw a family of elephants.",
    "Draw an ancient castle on a cliff.","Draw a glowing jellyfish.",
    "Draw a rainy day in a quiet town.","Draw a futuristic flying car.",
    "Draw a warm cozy fireplace.","Draw a magical forest filled with glowing plants.",
    "Draw a vintage bicycle in a meadow.","Draw a sunset over the ocean.",
    "Draw a dragon perched on a mountain.","Draw a floating lantern festival.",
    "Draw a lion basking in the sun.","Draw a haunted mansion on Halloween.",
    "Draw a field of sunflowers on a bright day.","Draw an astronaut in space, with planets.",
    "Draw an antique compass with intricate designs.","Draw a frog sitting on a lily pad.",
    "Draw a pirate ship on the open seas.","Draw a cozy café on a rainy afternoon.",
    "Draw a desert landscape with cacti and a setting sun.","Draw a medieval knight.",
    "Draw a peaceful river flowing through a forest.","Draw a vintage camera surrounded by old photos.",
    "Draw a beautiful peacock spreading its feathers.","Draw an old shipwreck with treasure scattered around."
};

    private JComboBox<String> categoryMenu;
    private JTextField customPromptField;
    private JComboBox<String> customPromptDropdown;
    private JTextArea outputArea;
    private JPanel calendarPanel;
    private List<String> customPrompts;

    public sample() {
        setTitle("Art Prompt Generator");
        setSize(1300, 700);
        setResizable(true);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridBagLayout());
        getContentPane().setBackground(new Color(245, 245, 220));

        customPrompts = new ArrayList<>();
        categoryMenu = new JComboBox<>(new String[]{"objects", "scenario", "animal", "landscape", "random"});
        customPromptField = new JTextField(20);
        customPromptDropdown = new JComboBox<>();
        outputArea = new JTextArea(2, 30);
        outputArea.setEditable(false);
        outputArea.setFont(new Font("Arial", Font.BOLD, 14));
        outputArea.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));

        calendarPanel = new JPanel(new GridBagLayout());
        calendarPanel.setBackground(new Color(240, 255, 240));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.BOTH;


        JLabel titleHeader = new JLabel("Art Prompt Generator", JLabel.CENTER);
        titleHeader.setFont(new Font("Arial", Font.BOLD, 24));
        titleHeader.setForeground(new Color(25, 25, 112)); 
        titleHeader.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        titleHeader.setOpaque(true);
        titleHeader.setBackground(new Color(176, 224, 230)); 

 
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        add(titleHeader, gbc);

 
        gbc.gridy++;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        JPanel topPanel = new JPanel(new GridLayout(1, 2));
        topPanel.setBackground(new Color(173, 216, 230));


        JPanel categoryPanel = new JPanel();
        categoryPanel.add(new JLabel("Category: "));
        categoryPanel.add(categoryMenu);
        JButton generatePromptButton = new JButton("Generate Prompt");
        generatePromptButton.addActionListener(new GeneratePromptListener());
        categoryPanel.add(generatePromptButton);
        topPanel.add(categoryPanel);


        JPanel customPromptPanel = new JPanel();
        customPromptPanel.add(new JLabel("Custom Input: "));
        customPromptPanel.add(customPromptField);
        JButton addCustomPromptButton = new JButton("Add");
        addCustomPromptButton.addActionListener(e -> addCustomPrompt());
        customPromptPanel.add(addCustomPromptButton);
        JButton removeCustomPromptButton = new JButton("Remove");
        removeCustomPromptButton.addActionListener(e -> removeCustomPrompt());
        customPromptPanel.add(removeCustomPromptButton);
        customPromptPanel.add(customPromptDropdown);
        topPanel.add(customPromptPanel);

        add(topPanel, gbc);

 
        gbc.gridy++;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        JPanel creditsOutputPanel = new JPanel();
        creditsOutputPanel.setBackground(new Color(245, 245, 220));

        JButton creditsButton = new JButton("Credits");
        creditsButton.setBackground(Color.RED);
        creditsButton.setForeground(Color.WHITE);
        creditsButton.addActionListener(e -> JOptionPane.showMessageDialog(this, """
                                                                                 Julianna Reigh Denolan - 09128897304 - jreighdenolan@gmail.com
                                                                                 Stephanie Grace Palima - 09944842636 - palimasteph@gmail.com"""));
        creditsOutputPanel.add(creditsButton);

        creditsOutputPanel.add(outputArea);
        add(creditsOutputPanel, gbc);

        gbc.gridy++;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        JPanel buttonPanel = new JPanel();
        JButton generateCalendarButton = new JButton("Generate Calendar");
        generateCalendarButton.addActionListener(new GenerateCalendarListener());
        buttonPanel.add(generateCalendarButton);


        JButton importButton = new JButton("Import");
        importButton.addActionListener(e -> importCalendar());
        buttonPanel.add(importButton);

        JButton exportButton = new JButton("Export");
        exportButton.addActionListener(e -> exportCalendar());
        buttonPanel.add(exportButton);

        add(buttonPanel, gbc);


        gbc.gridy++;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        JScrollPane calendarScrollPane = new JScrollPane(calendarPanel);
        calendarScrollPane.setPreferredSize(new Dimension(150, 100));
        add(calendarScrollPane, gbc);
    }

    private void addCustomPrompt() {
        String userPrompt = customPromptField.getText();
        if (!userPrompt.isEmpty()) {
            customPrompts.add(userPrompt);
            customPromptDropdown.addItem(userPrompt);
            customPromptField.setText("");
            JOptionPane.showMessageDialog(this, "Custom prompt added!");
        }
    }

    private void removeCustomPrompt() {
        String selectedPrompt = (String) customPromptDropdown.getSelectedItem();
        if (selectedPrompt != null) {
            customPrompts.remove(selectedPrompt);
            customPromptDropdown.removeItem(selectedPrompt);
            JOptionPane.showMessageDialog(this, "Custom prompt removed!");
        }
    }

    private String[] getPromptsByCategory(String category) {
        return switch (category) {
            case "scenario" -> SCENARIO_PROMPTS;
            case "animal" -> ANIMAL_PROMPTS;
            case "landscape" -> LANDSCAPE_PROMPTS;
            case "random" -> RANDOM_PROMPTS;
            default -> OBJECTS_PROMPTS;
        };
    }

    private void exportCalendar() {
    try {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                Component[] components = calendarPanel.getComponents();
                for (int i = 0; i < components.length; i++) {
                    if (components[i] instanceof JPanel) {
                        JPanel dayPanel = (JPanel) components[i];
                        JScrollPane scrollPane = (JScrollPane) dayPanel.getComponent(1);
                        JTextArea textArea = (JTextArea) scrollPane.getViewport().getView();
                        String promptText = textArea.getText();
                        writer.write("Day " + (i + 1) + " - " + promptText);
                        writer.newLine();
                    }
                }
            }
            JOptionPane.showMessageDialog(this, "Calendar exported successfully!");
        }
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "Error exporting calendar: " + ex.getMessage());
    }
}

private void importCalendar() {
    try {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                List<String> prompts = new ArrayList<>();
                String line;
                while ((line = reader.readLine()) != null) {
                    if (line.startsWith("Day ")) {
                        String prompt = line.substring(line.indexOf("-") + 2); 
                        prompts.add(prompt); 
                    } else {
                        prompts.add(line); 
                    }
                }
                populateCalendar(prompts, true);
            }
            JOptionPane.showMessageDialog(this, "Calendar imported successfully and is editable!");
        }
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "Error importing calendar: " + ex.getMessage());
    }
}

private void populateCalendar(List<String> prompts, boolean isEditable) {
    calendarPanel.removeAll();
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5);
    gbc.fill = GridBagConstraints.BOTH;

    for (int i = 0; i < prompts.size(); i++) {
        JPanel dayPanel = new JPanel(new BorderLayout());
        dayPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
        dayPanel.setPreferredSize(new Dimension(110, 90)); 

        JLabel dayLabel = new JLabel("Day " + (i + 1), JLabel.CENTER);

      
        String promptWithSpacing = prompts.get(i) + "\n\n";

        JTextArea promptTextArea = new JTextArea(promptWithSpacing);
        promptTextArea.setLineWrap(true);
        promptTextArea.setWrapStyleWord(true);
        promptTextArea.setEditable(isEditable);
        promptTextArea.setFont(new Font("Arial", Font.PLAIN, 12));
        promptTextArea.setMargin(new Insets(5, 5, 5, 5)); 


        promptTextArea.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    promptTextArea.setEditable(true); 
                }
            }
        });

        dayPanel.add(dayLabel, BorderLayout.NORTH);
        dayPanel.add(new JScrollPane(promptTextArea), BorderLayout.CENTER);

        gbc.gridx = i % 7; 
        gbc.gridy = i / 7;
        calendarPanel.add(dayPanel, gbc);
    }

    calendarPanel.revalidate();
    calendarPanel.repaint();
}

    private class GeneratePromptListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String category = (String) categoryMenu.getSelectedItem();
            String randomPrompt = getPromptsByCategory(category)[new Random().nextInt(getPromptsByCategory(category).length)];
            outputArea.setText(randomPrompt);
        }
    }

    private class GenerateCalendarListener implements ActionListener {
    @Override
    public void actionPerformed(ActionEvent e) {
        calendarPanel.removeAll();
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.BOTH;

        
        List<String> allPrompts = new ArrayList<>(List.of(getPromptsByCategory((String) categoryMenu.getSelectedItem())));
        allPrompts.addAll(customPrompts);


        Collections.shuffle(allPrompts);


        int numberOfDays = Math.min(30, allPrompts.size());

        for (int i = 1; i <= numberOfDays; i++) {
            JPanel dayPanel = new JPanel(new BorderLayout());
            dayPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
            dayPanel.setPreferredSize(new Dimension(110, 90));

            JLabel dayLabel = new JLabel("Day " + i, JLabel.CENTER);
            JTextArea promptTextArea = new JTextArea(allPrompts.get(i - 1));
            promptTextArea.setLineWrap(true);
            promptTextArea.setWrapStyleWord(true);
            promptTextArea.setEditable(true);

            dayPanel.add(dayLabel, BorderLayout.NORTH);
            dayPanel.add(new JScrollPane(promptTextArea), BorderLayout.CENTER);

            gbc.gridx = (i - 1) % 7;
            gbc.gridy = (i - 1) / 7;
            calendarPanel.add(dayPanel, gbc);
        }

        calendarPanel.revalidate();
        calendarPanel.repaint();
    }
}

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            sample app = new sample();
            app.setVisible(true);
        });
    }
}
